@if (update_attributes) { UpdateAttributes(); }
<div style="width: @((!Vertical && FillLength || Vertical && FillWidth) ? "100%" : "max-content"); height: @((Vertical && FillLength || !Vertical && FillWidth) ? "100%" : "max-content"); padding: @((!PaddingOnMaxFill && (Vertical && FillLength || !Vertical && FillWidth)) ? "0" : "5")px @((!PaddingOnMaxFill && (!Vertical && FillLength || Vertical && FillWidth)) ? "0" : "5")px @((!PaddingOnMaxFill && (Vertical && FillLength || !Vertical && FillWidth)) ? "0" : "5")px @((!PaddingOnMaxFill && (!Vertical && FillLength || Vertical && FillWidth)) ? "0" : "5")px; @style">
@if (!HideFillState)
    {
        <p style="margin: 0px; text-align: center">@fill_label</p>
    }
    <div style="height: @((Vertical) ? ((FillLength) ? "100%" : $"{Length}em") : ((FillWidth) ? "100%" : $"{Width}em"));
                width: @((Vertical) ? ((FillWidth) ? "100%" : $"{Width}em") : ((FillLength) ? "100%" : $"{Length}em"));
                background-color: @BackgroundColour;
                padding: 0px;
                border-radius: @(BorderRadius)px;
    " >
        @if (Percentage > 0.0f)
        {
            <div style="width: @((Vertical) ? 100 : Percentage)%;
                        height: @((Vertical) ? Percentage : 100)%;
                        background-color: @((Percentage >= DangerPercentageLimit) ? DangerColour : (Percentage >= WarningPercentageLimit) ? WarningColour : NormalColour);
                        border-radius: @(BorderRadius)px;
                        position: relative;
                        left: @((InvertDirection && !Vertical) ? 100.0f - Percentage : 0)%;
                        right: @((!InvertDirection && !Vertical) ? 100.0f - Percentage : 0)%;
                        top: @((!InvertDirection && Vertical) ? 100.0f - Percentage : 0)%;
                        bottom: @((InvertDirection && Vertical) ? 100.0f - Percentage : 0)%;
            " />
        }
    </div>
    @if (Label.Length > 0)
    {
        <p style="margin: 0px; text-align: center">
            @foreach (string line in bar_label)
            {
                @line<br />
            }
        </p>
    }
</div>

@code {
    /// <summary>
    /// Any additional/alternitive styling for the outermost div.
    /// </summary>
    [Parameter]
    public string style { get; set; } = "";

    [Parameter]
    public bool Vertical { get; set; } = false;
    [Parameter]
    public bool InvertDirection { get; set; } = false;

    [Parameter]
    public string BackgroundColour { get; set; } = "gray";
    [Parameter]
    public string NormalColour { get; set; } = "green";
    /// <summary>
    /// In em.
    /// </summary>
    [Parameter]
    public int Width { get; set; } = 5;
    /// <summary>
    /// Ignore Width and fill the avalible space.
    /// </summary>
    [Parameter]
    public bool FillWidth { get; set; } = false;
    /// <summary>
    /// In em.
    /// </summary>
    [Parameter]
    public int Length { get; set; } = 20;
    /// <summary>
    /// Ignore Length and fill the avalible space.
    /// </summary>
    [Parameter]
    public bool FillLength { get; set; } = false;
    [Parameter]
    public int WarningPercentageLimit { get; set; } = 101;
    [Parameter]
    public string WarningColour { get; set; } = "darkorange";
    [Parameter]
    public int DangerPercentageLimit { get; set; } = 101;
    [Parameter]
    public string DangerColour { get; set; } = "red";

    /// <summary>
    /// In pixels.
    /// </summary>
    [Parameter]
    public int BorderRadius { get; set; } = 0;

    /// <summary>
    /// Retain relivant dimension's padding when FillWidth or FillHeight are set.
    /// </summary>
    [Parameter]
    public bool PaddingOnMaxFill { get; set; } = true;

    [Parameter]
    public string Label { get { return _Label; } set { _Label = value; update_attributes = true; } }
    private string _Label = "";

    [Parameter]
    public bool HideFillState { get; set; } = false;

    [Parameter]
    public float? Percentage { get { return _Percentage; } set { _Percentage = value; update_attributes = true; } }
    private float? _Percentage = null;

    [Parameter]
    public uint? IntMax { get { return _IntMax; } set { _IntMax = value; update_attributes = true; } }
    private uint? _IntMax = null;

    [Parameter]
    public uint? IntValue { get { return _IntValue; } set { _IntValue = value; update_attributes = true; } }
    private uint? _IntValue = null;

    [Parameter]
    public float? FloatMax { get { return _FloatMax; } set { _FloatMax = value; update_attributes = true; } }
    private float? _FloatMax = null;

    [Parameter]
    public float? FloatValue { get { return _FloatValue; } set { _FloatValue = value; update_attributes = true; } }
    private float? _FloatValue = null;

    [Parameter]
    public uint DecimalPrecision { get { return _DecimalPrecision; } set { _DecimalPrecision = value; update_attributes = true; } }
    private uint _DecimalPrecision = 2;

    private string[] bar_label = new string[0];
    private string fill_label = "--%";
    private bool update_attributes = true;

    private void UpdateAttributes()
    {
        bar_label = Label.Split('\n', StringSplitOptions.None);

        if (IntValue is not null)
        {
            if (IntMax is null)
            {
                throw new ArgumentException("Only one Int... field was specified.");
            }
            Percentage = 100.0f * (float)IntValue / (float)IntMax;
            fill_label = $"{IntValue}/{IntMax}";
        }
        else if (FloatValue is not null)
        {
            if (FloatMax is null)
            {
                throw new ArgumentException("Only one Float... field was specified.");
            }
            Percentage = 100.0f * FloatValue / FloatMax;
            fill_label = $"{FloatValue.Value.ToString($"n{DecimalPrecision}")}/{FloatMax.Value.ToString($"n{DecimalPrecision}")}";
        }
        else if (Percentage is not null)
        {
            fill_label = $"{Percentage.Value.ToString($"n{DecimalPrecision}")}%";
        }
        else
        {
            throw new ArgumentException("No arguments provided to indicate capacity.");
        }

        update_attributes = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        
    }
}
