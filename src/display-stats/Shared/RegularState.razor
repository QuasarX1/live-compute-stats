@using display_stats.Data

@*<div style="display:flex; flex-direction: row; justify-content: center; align-items: center">*@
<div style="display:flex; flex-direction: row;">
    <FillBar Percentage=@((Status is not null) ? Status.TotalCPU : 0) Label=@("CPU\nUsage") Vertical=@true WarningPercentageLimit=75 DangerPercentageLimit=95 BorderRadius=5 Length=35 />
    <FillBar Percentage=@((Status is not null) ? Status.TotalMemory : 0) Label=@("Memory\nUsage") Vertical=@true WarningPercentageLimit=75 DangerPercentageLimit=95 BorderRadius=5 Length=35 />
    <DisplayTable TableData=@ServerUsageBrakedown style="margin-top: 28px" />
</div>

@code {
    [Parameter, EditorRequired]
    public ServerInfo Info { get; set; }

    [Parameter, EditorRequired]
    public RegularServerStatus Status { get; set; }

    private DisplayTableData ServerUsageBrakedown;

    protected override async Task OnInitializedAsync()
    {
        ServerUsageBrakedown = new DisplayTableData();
        ServerUsageBrakedown.AddColumn("User", Status.ActiveTrackedUsernames.Append("-").ToArray());
        ServerUsageBrakedown.AddColumn("CPU %", (from value in Status.UserCPU select value.ToString("n2")).Append((Status.TotalCPU - (from value in Status.UserCPU select value).Sum()).ToString("n2")).ToArray());
        ServerUsageBrakedown.AddColumn("Memory %", (from value in Status.UserMemory select value.ToString("n2")).Append((Status.TotalMemory - (from value in Status.UserMemory select value).Sum()).ToString("n2")).ToArray());
    }
}
